package com.example.mackinpad;

import java.util.Iterator;
import java.util.Set;

import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;

public class DeviceListActivity extends Activity {

	public static String EXTRA_DEVICE_ADDRESS = "device_address";
	private static final String TAG = "DeviceListActivity";
	private BluetoothAdapter mBtAdapter;

	private AdapterView.OnItemClickListener mDeviceClickListener = new AdapterView.OnItemClickListener() {

		public void onItemClick(AdapterView<?> paramAnonymousAdapterView,
				View paramAnonymousView, int paramAnonymousInt,
				long paramAnonymousLong) {
			DeviceListActivity.this.mBtAdapter.cancelDiscovery();
			String str1 = ((TextView) paramAnonymousView).getText().toString();
			String str2 = str1.substring(str1.length() - 17);
			Intent localIntent = new Intent();
			localIntent.putExtra(DeviceListActivity.EXTRA_DEVICE_ADDRESS, str2);
			DeviceListActivity.this.setResult(-1, localIntent);
			DeviceListActivity.this.finish();
		}
	};

	private ArrayAdapter<String> mNewDevicesArrayAdapter;
	private ArrayAdapter<String> mPairedDevicesArrayAdapter;

	private final BroadcastReceiver mReceiver = new BroadcastReceiver() {
		@Override
		public void onReceive(Context context, Intent intent) {
			String action = intent.getAction();

			// When discovery finds a device
			if (BluetoothDevice.ACTION_FOUND.equals(action)) {
				// Get the BluetoothDevice object from the Intent
				BluetoothDevice device = intent
						.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
				// If it's already paired, skip it, because it's been listed
				// already
				if (device.getBondState() != BluetoothDevice.BOND_BONDED) {
					mNewDevicesArrayAdapter.add(device.getName() + "\n"
							+ device.getAddress());
				}
				// When discovery is finished, change the Activity title
			} else if (BluetoothAdapter.ACTION_DISCOVERY_FINISHED
					.equals(action)) {
				setProgressBarIndeterminateVisibility(false);
				setTitle(R.string.select_device);
				if (mNewDevicesArrayAdapter.getCount() == 0) {
					String noDevices = "Not Found";
					mNewDevicesArrayAdapter.add(noDevices);
				}
			}
		}
	};

	private void doDiscovery() {
		Log.d("DeviceListActivity", "doDiscovery()");
		setProgressBarIndeterminateVisibility(true);
		setTitle("scanning");
		findViewById(R.id.title_new_devices).setVisibility(View.VISIBLE);
		if (this.mBtAdapter.isDiscovering())
			this.mBtAdapter.cancelDiscovery();
		this.mBtAdapter.startDiscovery();
	}

	protected void onCreate(Bundle paramBundle) {
		super.onCreate(paramBundle);
		Log.i("TAG", "1");
		requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
		setContentView(R.layout.device_list);
		Log.i("TAG", "2");
		setResult(Activity.RESULT_CANCELED);

		((Button) findViewById(R.id.button_scan))
				.setOnClickListener(new View.OnClickListener() {
					public void onClick(View paramAnonymousView) {
						DeviceListActivity.this.doDiscovery();
						paramAnonymousView.setVisibility(View.GONE);
					}
				});

		if (StartActivity.isTablet(this)) {
			this.mPairedDevicesArrayAdapter = new ArrayAdapter<String>(this,
					R.layout.device_name_tab);
			this.mNewDevicesArrayAdapter = new ArrayAdapter<String>(this,
					R.layout.device_name_tab);
		} else {
			this.mPairedDevicesArrayAdapter = new ArrayAdapter<String>(this,
					R.layout.device_name);
			this.mNewDevicesArrayAdapter = new ArrayAdapter<String>(this,
					R.layout.device_name);
		}

		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

		ListView localListView1 = (ListView) findViewById(R.id.paired_devices);
		localListView1.setAdapter(this.mPairedDevicesArrayAdapter);
		localListView1.setOnItemClickListener(this.mDeviceClickListener);

		ListView localListView2 = (ListView) findViewById(R.id.new_devices);
		localListView2.setAdapter(this.mNewDevicesArrayAdapter);
		localListView2.setOnItemClickListener(this.mDeviceClickListener);

		IntentFilter localIntentFilter1 = new IntentFilter(
				"android.bluetooth.device.action.FOUND");
		registerReceiver(this.mReceiver, localIntentFilter1);

		IntentFilter localIntentFilter2 = new IntentFilter(
				"android.bluetooth.adapter.action.DISCOVERY_FINISHED");
		registerReceiver(this.mReceiver, localIntentFilter2);

		this.mBtAdapter = BluetoothAdapter.getDefaultAdapter();
		Set<BluetoothDevice> localSet = this.mBtAdapter.getBondedDevices();

		if (localSet.size() > 0) {
			findViewById(R.id.title_paired_devices).setVisibility(View.VISIBLE);
			Iterator<BluetoothDevice> localIterator = localSet.iterator();
			while (true) {
				if (!localIterator.hasNext())
					return;
				BluetoothDevice localBluetoothDevice = (BluetoothDevice) localIterator
						.next();
				this.mPairedDevicesArrayAdapter.add(localBluetoothDevice
						.getName() + "\n" + localBluetoothDevice.getAddress());
			}
		}
		String str = "None Paired";
		this.mPairedDevicesArrayAdapter.add(str);
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {

		if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {
			if (this.mBtAdapter != null) {
				this.mBtAdapter.cancelDiscovery();
				mBtAdapter = null;
			}
			// unregisterReceiver(this.mReceiver);
			finish();
			return true;
		}

		return super.onKeyDown(keyCode, event);
	}

	protected void onDestroy() {
		super.onDestroy();
		if (this.mBtAdapter != null) {
			this.mBtAdapter.cancelDiscovery();
			mBtAdapter = null;
		}
		unregisterReceiver(this.mReceiver);

	}

}